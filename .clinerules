# mcp server development protocol

⚠️ critical: do not use attempt_completion before testing ⚠️

## step 1: planning (plan mode)
- what problem does this tool solve?
- what api/service will it use?
- what are the authentication requirements?
  □ standard api key
  □ oauth (requires separate setup script)
  □ other credentials

## step 2: implementation (act mode)
1. bootstrap
   - for web services, javascript integration, or node.js environments:
     ```bash
     npx @modelcontextprotocol/create-server my-server
     cd my-server
     npm install
     ```
   - for data science, ml workflows, or python environments:
     ```bash
     pip install mcp
     # or with uv (recommended)
     uv add "mcp[cli]"
     ```

2. core implementation
   - use mcp sdk
   - implement comprehensive logging
     - typescript (for web/js projects):
       ```typescript
       console.error('[setup] initializing server...');
       console.error('[api] request to endpoint:', endpoint);
       console.error('[error] failed with:', error);
       ```
     - python (for data science/ml projects):
       ```python
       import logging
       logging.error('[setup] initializing server...')
       logging.error(f'[api] request to endpoint: {endpoint}')
       logging.error(f'[error] failed with: {str(error)}')
       ```
   - add type definitions
   - handle errors with context
   - implement rate limiting if needed

3. configuration
   - get credentials from user if needed
   - add to mcp settings:
     - for typescript projects:
       ```json
       {
         "mcpservers": {
           "my-server": {
             "command": "node",
             "args": ["path/to/build/index.js"],
             "env": {
               "api_key": "key"
             },
             "disabled": false,
             "autoapprove": []
           }
         }
       }
       ```
     - for python projects:
       ```bash
       # directly with command line
       mcp install server.py -v api_key=key
       
       # or in settings.json
       {
         "mcpservers": {
           "my-server": {
             "command": "python",
             "args": ["server.py"],
             "env": {
               "api_key": "key"
             },
             "disabled": false,
             "autoapprove": []
           }
         }
       }
       ```

## step 3: testing (blocker ⛔️)

<thinking>
before using attempt_completion, i must verify:
□ have i tested every tool?
□ have i confirmed success from the user for each test?
□ have i documented the test results?

if any answer is "no", i must not use attempt_completion.
</thinking>

1. test each tool (required)
   □ test each tool with valid inputs
   □ verify output format is correct
   ⚠️ do not proceed until all tools tested

## step 4: completion
❗ stop and verify:
□ every tool has been tested with valid inputs
□ output format is correct for each tool

only after all tools have been tested can attempt_completion be used.

## key requirements
- ✓ must use mcp sdk
- ✓ must have comprehensive logging
- ✓ must test each tool individually
- ✓ must handle errors gracefully
- ⛔️ never skip testing before completion