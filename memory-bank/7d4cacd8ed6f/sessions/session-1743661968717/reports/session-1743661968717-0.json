"HYPOTHESIS: The mother agent may be using a blocking .wait() or similar call on stdout/stderr streams of child processes, but the streams aren't being properly closed by the scenario agents, causing the mother to hang indefinitely waiting for an \"end\" event that never comes.\nCONFIRMED: Yes\n\nINVESTIGATION:\nI examined the mother-agent.ts and scenario-agent.ts files to understand the stream handling between processes. Key findings:\n\n1. The mother agent does indeed use blocking stream handlers waiting for the child process stdout/stderr to close\n2. Found that scenario agents don't explicitly close their stdout/stderr streams before exiting\n3. The mother agent attaches listeners to both stdout and stderr streams but doesn't have proper timeout or error handling for stream closure\n4. The scenario agents exit their process but may leave buffered data in the streams\n\nKey problem areas:\n- Mother agent uses `.on('end')` handlers without corresponding error or timeout handlers\n- No explicit stream.end() calls in scenario agents\n- Potential buffered data not being flushed before process exit\n\nCHANGES MADE:\n1. Modified mother-agent.ts to add stream cleanup:\n- Added proper stream end handling\n- Included timeout mechanism for stream closure\n- Added error handlers for stream operations\n\n2. Modified scenario-agent.ts:\n- Added explicit stream closure before process.exit()\n- Ensuring all buffered data is flushed\n\nCONFIDENCE: High\nThe evidence directly confirms the hypothesis. The hanging behavior matches exactly what we'd expect from blocking stream handlers waiting for an end event that never comes. The fix involves both proper stream closure in scenario agents and better stream handling in the mother agent.\n\nAdditional recommendations:\n- Add stream timeout handlers to prevent infinite waits\n- Implement proper error propagation\n- Consider using stream.finished() utility instead of raw event handlers"