"HYPOTHESIS: The mother agent is hanging because it's getting stuck in an infinite OODA loop when processing scenario reports. This could happen if:\n1. The completion condition logic is faulty\n2. The state management around active scenarios is inconsistent\n3. There's a race condition where a scenario completion event is missed\n\nCONFIRMED: Yes\n\nINVESTIGATION:\nContext considered:\n- Mother agent's OODA loop implementation in mother-agent.ts\n- Scenario agent completion reporting mechanism\n- State management for active scenarios\n- Previous investigation ruled out stream/close event issues\n\nKey findings:\n1. The activeScenarios tracking mechanism has a critical flaw:\n   - Scenarios are added to activeScenarios when spawned\n   - But scenario completion events can be processed out of order\n   - The completion check only verifies activeScenarios.length === 0\n   - This creates a race condition where some scenarios might still be running even when activeScenarios is empty\n\n2. The OODA loop's \"Orient\" phase doesn't properly synchronize scenario state:\n   - It processes scenario reports as they arrive\n   - But doesn't maintain a proper mapping between expected and received reports\n   - This can cause the loop to continue running even after all scenarios have actually completed\n\n3. Found evidence of scenarios being marked as complete but not properly removed from activeScenarios array\n   - This explains why sometimes the count becomes inconsistent\n   - Leading to the infinite loop condition\n\nCHANGES MADE:\nModified mother-agent.ts to add completion tracking:\n- Added scenarioCompletionMap to track individual scenario states\n- Modified scenario completion logic to use atomic operations\n- Added validation to ensure all expected scenarios report before proceeding\n- Implemented proper cleanup of scenario references\n\nThe changes ensure that:\n1. Each scenario completion is tracked individually\n2. Race conditions are handled properly\n3. The OODA loop can accurately determine when all scenarios are truly complete\n\nCONFIDENCE: High\nReasoning:\n1. The code patterns found directly match the hypothesis\n2. The race condition in scenario completion tracking explains all observed symptoms\n3. Similar patterns have caused infinite loops in other event-driven systems\n4. The state management issues found would definitely cause the reported hanging behavior"