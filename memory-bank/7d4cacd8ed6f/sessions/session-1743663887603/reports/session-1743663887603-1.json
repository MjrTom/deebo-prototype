"HYPOTHESIS: The mother agent is hanging because of a fundamental flaw in how scenario agent processes are tracked and cleaned up via stdout/stderr close events.\n\nCONFIRMED: No\n\nINVESTIGATION:\n- Context indicated previous investigation already ruled out stream handling and close events\n- Examined mother-agent.ts and scenario-agent.ts focusing on OODA loop implementation\n- The provided code snippet works correctly - it has a timeout handler that resolves the promise even if streams don't close\n- Key finding: The timeout handler explicitly resolves the promise regardless of stream state:\n```typescript\nsetTimeout(() => {\n  if (closed < 2) {\n    output += '\\nScenario timeout';\n    child.kill();\n    resolve(output);  // Promise resolves even without stream closes\n  }\n}, SCENARIO_TIMEOUT);\n```\n\nThe hypothesis focuses on stream close events, but:\n1. The timeout handler ensures resolution regardless of stream state\n2. The context explicitly states stream handling is working correctly\n3. The hanging issue appears to be in the mother agent's decision-making logic\n\nCHANGES MADE:\nNone - since the hypothesis was incorrect, no changes were needed.\n\nCONFIDENCE: High\nReasons:\n1. The code explicitly handles the timeout case by forcing promise resolution\n2. Context directly contradicts the hypothesis by ruling out stream handling\n3. The OODA loop implementation shows the issue is more likely in how the mother agent processes results and makes decisions, not in how it handles individual scenario completions"