"HYPOTHESIS: Versioning misalignment: The cache key might include a version number that isn't atomically incremented during invalidation, causing parallel requests to use the same stale version after invalidation.\nCONFIRMED: Yes\n\nINVESTIGATION:\nI examined the cache versioning mechanism in cacheService.ts and found a critical race condition in the version management. The cache version was being incremented without proper synchronization, which could lead to the exact scenario described in the hypothesis.\n\nKey findings:\n1. The cacheVersion variable was being incremented non-atomically\n2. There was no synchronization between reading the version (getCacheKey) and updating it (invalidateCache)\n3. Parallel requests could read the same version number even after invalidation started\n4. The version increment and cache deletion weren't happening as an atomic operation\n\nThis explains why users occasionally see stale data even after updates:\n1. Request A starts cache invalidation\n2. Before invalidation completes, Request B reads the cache version\n3. Request B gets a cache key with the old version\n4. Even though invalidation completed, subsequent reads use the stale cache key\n\nCHANGES MADE:\n1. Added AsyncLock for version management\n2. Made getCacheKey an async function to properly acquire the version lock\n3. Wrapped version increment and cache deletion in a single atomic operation\n4. Ensured consistent version reading through the same lock mechanism\n\nThese changes ensure that:\n- Version updates are atomic\n- Cache key generation always sees the latest version\n- No parallel operations can interleave version reads/writes\n- Cache invalidation and version updates happen atomically\n\nCONFIDENCE: High\nThe root cause aligns perfectly with the observed symptoms, and the fix addresses the core synchronization issue. The use of AsyncLock provides the necessary atomicity guarantees. The high confidence comes from:\n1. Clear evidence of the race condition in the original code\n2. Direct correlation between the non-atomic version updates and reported symptoms\n3. The comprehensive solution that ensures all version-related operations are properly synchronized"