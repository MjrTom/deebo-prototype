paste text into llms for setup help (uv docs, git-mcp readme, desktopcommander readme)

Skip to content
Navigation Menu
modelcontextprotocol
servers

Type / to search
Code
Issues
250
Pull requests
263
Actions
Security
Insights
servers/src
/git/
Go to file
t
tadasant
tadasant
Fix git
f788522
 Â· 
2 weeks ago
Name	Last commit message	Last commit date
..
src/mcp_server_git
Add git init command support to mcp-git-server and update README
3 months ago
tests
Use a test fixture to set proper patterns.
4 months ago
.gitignore
Initial commit
5 months ago
.python-version
move to python 3.10
5 months ago
Dockerfile
Switch to uv-less final stages
4 months ago
LICENSE
Initial commit
5 months ago
README.md
Add git init command support to mcp-git-server and update README
3 months ago
pyproject.toml
Allow to check out branches
4 months ago
uv.lock
Fix git
2 weeks ago
README.md
mcp-server-git: A git MCP server
Overview
A Model Context Protocol server for Git repository interaction and automation. This server provides tools to read, search, and manipulate Git repositories via Large Language Models.

Please note that mcp-server-git is currently in early development. The functionality and available tools are subject to change and expansion as we continue to develop and improve the server.

Tools
git_status

Shows the working tree status
Input:
repo_path (string): Path to Git repository
Returns: Current status of working directory as text output
git_diff_unstaged

Shows changes in working directory not yet staged
Input:
repo_path (string): Path to Git repository
Returns: Diff output of unstaged changes
git_diff_staged

Shows changes that are staged for commit
Input:
repo_path (string): Path to Git repository
Returns: Diff output of staged changes
git_diff

Shows differences between branches or commits
Inputs:
repo_path (string): Path to Git repository
target (string): Target branch or commit to compare with
Returns: Diff output comparing current state with target
git_commit

Records changes to the repository
Inputs:
repo_path (string): Path to Git repository
message (string): Commit message
Returns: Confirmation with new commit hash
git_add

Adds file contents to the staging area
Inputs:
repo_path (string): Path to Git repository
files (string[]): Array of file paths to stage
Returns: Confirmation of staged files
git_reset

Unstages all staged changes
Input:
repo_path (string): Path to Git repository
Returns: Confirmation of reset operation
git_log

Shows the commit logs
Inputs:
repo_path (string): Path to Git repository
max_count (number, optional): Maximum number of commits to show (default: 10)
Returns: Array of commit entries with hash, author, date, and message
git_create_branch

Creates a new branch
Inputs:
repo_path (string): Path to Git repository
branch_name (string): Name of the new branch
start_point (string, optional): Starting point for the new branch
Returns: Confirmation of branch creation
git_checkout

Switches branches
Inputs:
repo_path (string): Path to Git repository
branch_name (string): Name of branch to checkout
Returns: Confirmation of branch switch
git_show
Shows the contents of a commit
Inputs:
repo_path (string): Path to Git repository
revision (string): The revision (commit hash, branch name, tag) to show
Returns: Contents of the specified commit
git_init
Initializes a Git repository
Inputs:
repo_path (string): Path to directory to initialize git repo
Returns: Confirmation of repository initialization
Installation
Using uv (recommended)
When using uv no specific installation is needed. We will use uvx to directly run mcp-server-git.

Using PIP
Alternatively you can install mcp-server-git via pip:

pip install mcp-server-git
After installation, you can run it as a script using:

python -m mcp_server_git
Configuration
Usage with Claude Desktop
Add this to your claude_desktop_config.json:

Using uvx
Using docker
Using pip installation
Usage with Zed
Add to your Zed settings.json:

Using uvx
Using pip installation
Debugging
You can use the MCP inspector to debug the server. For uvx installations:

npx @modelcontextprotocol/inspector uvx mcp-server-git
Or if you've installed the package in a specific directory or are developing on it:

cd path/to/servers/src/git
npx @modelcontextprotocol/inspector uv run mcp-server-git
Running tail -n 20 -f ~/Library/Logs/Claude/mcp*.log will show the logs from the server and may help you debug any issues.

Development
If you are doing local development, there are two ways to test your changes:

Run the MCP inspector to test your changes. See Debugging for run instructions.

Test using the Claude desktop app. Add the following to your claude_desktop_config.json:

Docker
{
  "mcpServers": {
    "git": {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "--mount", "type=bind,src=/Users/username/Desktop,dst=/projects/Desktop",
        "--mount", "type=bind,src=/path/to/other/allowed/dir,dst=/projects/other/allowed/dir,ro",
        "--mount", "type=bind,src=/path/to/file.txt,dst=/projects/path/to/file.txt",
        "mcp/git"
      ]
    }
  }
}
UVX
{
"mcpServers": {
  "git": {
    "command": "uv",
    "args": [ 
      "--directory",
      "/<path to mcp-servers>/mcp-servers/src/git",
      "run",
      "mcp-server-git"
    ]
  }
}
Build
Docker build:

cd src/git
docker build -t mcp/git .
License
This MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.

 Skip to content
logo
uv
Installation


Search

 uv
0.6.13
48.4k
1.4k
Introduction
Getting started
Installation
First steps
Features
Getting help
Guides
Installing Python
Running scripts
Using tools
Working on projects
Publishing packages
Integrations
Concepts
Projects
Tools
Python versions
Resolution
Caching
Configuration
Configuration files
Environment variables
Authentication
Package indexes
Installer
The pip interface
Using environments
Managing packages
Inspecting packages
Declaring dependencies
Locking environments
Compatibility with pip
Reference
Commands
Settings
Troubleshooting
Resolver
Benchmarks
Policies
Installation methods
Standalone installer
PyPI
Cargo
Homebrew
WinGet
Scoop
Docker
GitHub Releases
Upgrading uv
Shell autocompletion
Uninstallation
Next steps
Getting started
Installing uv
Installation methods
Install uv with our standalone installers or your package manager of choice.

Standalone installer
uv provides a standalone installer to download and install uv:


macOS and Linux
Windows
Use curl to download the script and execute it with sh:


curl -LsSf https://astral.sh/uv/install.sh | sh
If your system doesn't have curl, you can use wget:


wget -qO- https://astral.sh/uv/install.sh | sh
Request a specific version by including it in the URL:


curl -LsSf https://astral.sh/uv/0.6.13/install.sh | sh

Tip

The installation script may be inspected before use:


macOS and Linux
Windows

curl -LsSf https://astral.sh/uv/install.sh | less

Alternatively, the installer or binaries can be downloaded directly from GitHub.

See the documentation on installer configuration for details on customizing your uv installation.

PyPI
For convenience, uv is published to PyPI.

If installing from PyPI, we recommend installing uv into an isolated environment, e.g., with pipx:


pipx install uv
However, pip can also be used:


pip install uv
Note

uv ships with prebuilt distributions (wheels) for many platforms; if a wheel is not available for a given platform, uv will be built from source, which requires a Rust toolchain. See the contributing setup guide for details on building uv from source.

Cargo
uv is available via Cargo, but must be built from Git rather than crates.io due to its dependency on unpublished crates.


cargo install --git https://github.com/astral-sh/uv uv
Homebrew
uv is available in the core Homebrew packages.


brew install uv
WinGet
uv is available via WinGet.


winget install --id=astral-sh.uv  -e
Scoop
uv is available via Scoop.


scoop install main/uv
Docker
uv provides a Docker image at ghcr.io/astral-sh/uv.

See our guide on using uv in Docker for more details.

GitHub Releases
uv release artifacts can be downloaded directly from GitHub Releases.

Each release page includes binaries for all supported platforms as well as instructions for using the standalone installer via github.com instead of astral.sh.

Upgrading uv
When uv is installed via the standalone installer, it can update itself on-demand:


uv self update
Tip

Updating uv will re-run the installer and can modify your shell profiles. To disable this behavior, set INSTALLER_NO_MODIFY_PATH=1.

When another installation method is used, self-updates are disabled. Use the package manager's upgrade method instead. For example, with pip:


pip install --upgrade uv
Shell autocompletion
Tip

You can run echo $SHELL to help you determine your shell.

To enable shell autocompletion for uv commands, run one of the following:


Bash
Zsh
fish
Elvish
PowerShell / pwsh

echo 'eval "$(uv generate-shell-completion bash)"' >> ~/.bashrc

To enable shell autocompletion for uvx, run one of the following:


Bash
Zsh
fish
Elvish
PowerShell / pwsh

echo 'eval "$(uvx --generate-shell-completion bash)"' >> ~/.bashrc

Then restart the shell or source the shell config file.

Uninstallation
If you need to remove uv from your system, follow these steps:

Clean up stored data (optional):


uv cache clean
rm -r "$(uv python dir)"
rm -r "$(uv tool dir)"
Tip

Before removing the binaries, you may want to remove any data that uv has stored.

Remove the uv and uvx binaries:


macOS and Linux
Windows

rm ~/.local/bin/uv ~/.local/bin/uvx

Note

Prior to 0.5.0, uv was installed into ~/.cargo/bin. The binaries can be removed from there to uninstall. Upgrading from an older version will not automatically remove the binaries from ~/.cargo/bin.

Next steps
See the first steps or jump straight to the guides to start using uv.

 Back to top
Previous
Index
Next
First steps
Made with Material for MkDocs Insiders
Skip to content
Navigation Menu
wonderwhy-er
DesktopCommanderMCP

Type / to search
Code
Issues
13
Pull requests
1
Discussions
Actions
Projects
Security
Insights
Owner avatar
DesktopCommanderMCP
Public
wonderwhy-er/DesktopCommanderMCP
Go to file
t
Name		
author
Developer
fix: fixed install sh on landing
3c351b4
 Â· 
6 hours ago
.github/workflows
Add github action to codespell main on push and PRs
4 days ago
docs
fix: fixed install sh on landing
6 hours ago
scripts
Some cleanups and improvements
3 months ago
src
Release v0.1.33
7 hours ago
test
Add package test script to run all tests
3 days ago
testemonials
Add media article
2 weeks ago
.codespellrc
Add rudimentary codespell config
4 days ago
.gitignore
Initial code commit
4 months ago
.npmignore
Updates to publish in npm
3 months ago
Dockerfile
Add Dockerfile
2 weeks ago
FAQ.md
Update readme and FAQ
17 hours ago
LICENSE
Initial commit
4 months ago
README.md
Merge pull request #64 from wonderwhy-er/feat/install_sh_script
7 hours ago
config.json
Some cleanups
4 months ago
header.png
Better header
5 days ago
install.sh
feat: install sh to check for nodejs, install nodejs and configure dc
yesterday
logo.png
Update logo
2 weeks ago
package-lock.json
Release v0.1.33
7 hours ago
package.json
Release v0.1.33
7 hours ago
setup-claude-server.js
Release v0.1.33
7 hours ago
smithery.yaml
Add Smithery configuration
2 weeks ago
tsconfig.json
fix: Resolve Windows ESM path issues in MCP server
3 weeks ago
Repository files navigation
README
MIT license
Desktop Commander MCP
Search, update, manage files and run terminal commands with AI
npm downloads smithery badge Buy Me A Coffee

Discord

Short version. Four key things. Terminal commands, diff based file editing, ripgrep based text search in folders, ability to read files from urls

Desktop Commander MCP Claude Desktop Commander MCP server

Table of Contents
Features
Installation
Usage
Handling Long-Running Commands
Work in Progress and TODOs
Media links
Testimonials
Frequently Asked Questions
Contributing
License
This is server that allows Claude desktop app to execute long-running terminal commands on your computer and manage processes through Model Context Protocol (MCP) + Built on top of MCP Filesystem Server to provide additional search and replace file editing capabilities .

Features
Execute terminal commands with output streaming
Command timeout and background execution support
Process management (list and kill processes)
Session management for long-running commands
Full filesystem operations:
Read/write files
Create/list directories
Move files/directories
Search files
Get file metadata
Code editing capabilities:
Surgical text replacements for small changes
Full file rewrites for major changes
Multiple file support
Pattern-based replacements
vscode-ripgrep based recursive code or text search in folders
Installation
First, ensure you've downloaded and installed the Claude Desktop app and you have npm installed.

Option 1: Install through npx
Just run this in terminal

npx @wonderwhy-er/desktop-commander@latest setup
For debugging mode (allows Node.js inspector connection):

npx @wonderwhy-er/desktop-commander@latest setup --debug
Restart Claude if running

Option 2: Using bash script installer (macOS)
For macOS users, you can use our automated bash installer which will check your Node.js version, install it if needed, and automatically configure Desktop Commander:

curl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install.sh | bash
This script handles all dependencies and configuration automatically for a seamless setup experience.

Option 3: Installing via Smithery
To install Desktop Commander for Claude Desktop automatically via Smithery:

npx -y @smithery/cli install @wonderwhy-er/desktop-commander --client claude
Option 4: Add to claude_desktop_config by hand
Add this entry to your claude_desktop_config.json:

On Mac: ~/Library/Application\ Support/Claude/claude_desktop_config.json
On Windows: %APPDATA%\Claude\claude_desktop_config.json
On Linux: ~/.config/Claude/claude_desktop_config.json
{
  "mcpServers": {
    "desktop-commander": {
      "command": "npx",
      "args": [
        "-y",
        "@wonderwhy-er/desktop-commander"
      ]
    }
  }
}
Restart Claude if running

Option 5: Checkout locally
Clone and build:
git clone https://github.com/wonderwhy-er/ClaudeComputerCommander.git
cd ClaudeComputerCommander
npm run setup
Restart Claude if running

The setup command will:

Install dependencies
Build the server
Configure Claude's desktop app
Add MCP servers to Claude's config if needed
Updating Desktop Commander
When installed through npx (Option 1) or Smithery (Option 2), Desktop Commander will automatically update to the latest version whenever you restart Claude. No manual update process is needed.

For manual installations, you can update by running the setup command again.

Usage
The server provides these tool categories:

Terminal Tools
execute_command: Run commands with configurable timeout
read_output: Get output from long-running commands
force_terminate: Stop running command sessions
list_sessions: View active command sessions
list_processes: View system processes
kill_process: Terminate processes by PID
block_command/unblock_command: Manage command blacklist
Filesystem Tools
read_file/write_file: Read files from local filesystem or URLs (supports viewing PNG, JPEG, GIF, and WebP images directly in Claude)
create_directory/list_directory: Directory management
move_file: Move/rename files
search_files: Pattern-based file search
get_file_info: File metadata
search_code: Recursive ripgrep based text and code search
Edit Tools
edit_block: Apply surgical text replacements (best for changes <20% of file size)
write_file: Complete file rewrites (best for large changes >20% or when edit_block fails)
Search/Replace Block Format:

filepath.ext
<<<<<<< SEARCH
content to find
=======
new content
>>>>>>> REPLACE
Example:

src/main.js
<<<<<<< SEARCH
console.log("old message");
=======
console.log("new message");
>>>>>>> REPLACE
URL Support
read_file can now fetch content from both local files and URLs
Example: read_file with isUrl: true parameter to read from web resources
Handles both text and image content from remote sources
Images (local or from URLs) are displayed visually in Claude's interface, not as text
Claude can see and analyze the actual image content
Default 30-second timeout for URL requests
Handling Long-Running Commands
For commands that may take a while:

execute_command returns after timeout with initial output
Command continues in background
Use read_output with PID to get new output
Use force_terminate to stop if needed
Debugging
If you need to debug the server, you can install it in debug mode:

# Using npx
npx @wonderwhy-er/desktop-commander@latest setup --debug

# Or if installed locally
npm run setup:debug
This will:

Configure Claude to use a separate "desktop-commander" server
Enable Node.js inspector protocol with --inspect-brk=9229 flag
Pause execution at the start until a debugger connects
Enable additional debugging environment variables
To connect a debugger:

In Chrome, visit chrome://inspect and look for the Node.js instance
In VS Code, use the "Attach to Node Process" debug configuration
Other IDEs/tools may have similar "attach" options for Node.js debugging
Important debugging notes:

The server will pause on startup until a debugger connects (due to the --inspect-brk flag)
If you don't see activity during debugging, ensure you're connected to the correct Node.js process
Multiple Node processes may be running; connect to the one on port 9229
The debug server is identified as "desktop-commander-debug" in Claude's MCP server list
Troubleshooting:

If Claude times out while trying to use the debug server, your debugger might not be properly connected
When properly connected, the process will continue execution after hitting the first breakpoint
You can add additional breakpoints in your IDE once connected
Model Context Protocol Integration
This project extends the MCP Filesystem Server to enable:

Local server support in Claude Desktop
Full system command execution
Process management
File operations
Code editing with search/replace blocks
Created as part of exploring Claude MCPs: https://youtube.com/live/TlbjFDbl5Us

DONE
07-04-2025 Added URL support - read_file command can now fetch content from URLs
28-03-2025 Fixed "Watching /" JSON error - Implemented custom stdio transport to handle non-JSON messages and prevent server crashes
25-03-2025 Better code search (merged) - Enhanced code exploration with context-aware results
Work in Progress and TODOs
The following features are currently being developed or planned:

Better configurations (in progress) - Improved settings for allowed paths, commands and shell environment
Windows environment fixes (in progress) - Resolving issues specific to Windows platforms
Linux improvements (in progress) - Enhancing compatibility with various Linux distributions
Support for WSL - Windows Subsystem for Linux integration
Support for SSH - Remote server command execution
Installation troubleshooting guide - Comprehensive help for setup issues
Website
Visit our official website at https://desktopcommander.app/ for the latest information, documentation, and updates.

Media
Learn more about this project through these resources:

Article
Claude with MCPs replaced Cursor & Windsurf. How did that happen? - A detailed exploration of how Claude with Model Context Protocol capabilities is changing developer workflows.

Video
Claude Desktop Commander Video Tutorial - Watch how to set up and use the Commander effectively.

Publication at AnalyticsIndiaMag
analyticsindiamag.png This Developer Ditched Windsurf, Cursor Using Claude with MCPs

Community
Join our Discord server to get help, share feedback, and connect with other users.

Testimonials
It's a life saver! I paid Claude + Cursor currently which I always feel it's kind of duplicated. This solves the problem ultimately. I am so happy. Thanks so much. Plus today Claude has added the web search support. With this MCP + Internet search, it writes the code with the latest updates. It's so good when Cursor doesn't work sometimes or all the fast requests are used. https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyyBt6_ShdDX_rIOad4AaABAg

This is the first comment I've ever left on a youtube video, THANK YOU! I've been struggling to update an old Flutter app in Cursor from an old pre null-safety version to a current version and implemented null-safety using Claude 3.7. I got most of the way but had critical BLE errors that I spent days trying to resolve with no luck. I tried Augment Code but it didn't get it either. I implemented your MCP in Claude desktop and was able to compare the old and new codebase fully, accounting for the updates in the code, and fix the issues in a couple of hours. A word of advice to people trying this, be sure to stage changes and commit when appropriate to be able to undo unwanted changes. Amazing! https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgztdHvDMqTb9jiqnf54AaABAg

Great! I just used Windsurf, bought license a week ago, for upgrading old fullstack socket project and it works many times good or ok but also many times runs away in cascade and have to revert all changes losing hundereds of cascade tokens. In just a week down to less than 100 tokens and do not want to buy only 300 tokens for 10$. This Claude MCP ,bought claude Pro finally needed but wanted very good reason to also have next to ChatGPT, and now can code as much as I want not worrying about token cost. Also this is much more than code editing it is much more thank you for great video! https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyQFTmYLJ4VBwIlmql4AaABAg

it is a great tool, thank you, I like using it, as it gives claude an ability to do surgical edits, making it more like a human developer. https://www.youtube.com/watch?v=ly3bed99Dy8&lc=Ugy4-exy166_Ma7TH-h4AaABAg

You sir are my hero. You've pretty much summed up and described my experiences of late, much better than I could have. Cursor and Windsurf both had me frustrated to the point where I was almost yelling at my computer screen. Out of whimsy, I thought to myself why not just ask Claude directly, and haven't looked back since. Claude first to keep my sanity in check, then if necessary, engage with other IDEs, frameworks, etc. I thought I was the only one, glad to see I'm not lol. 33 1 https://medium.com/@pharmx/you-sir-are-my-hero-62cff5836a3e

Contributing
If you find this project useful, please consider giving it a â­ star on GitHub! This helps others discover the project and encourages further development.

We welcome contributions from the community! Whether you've found a bug, have a feature request, or want to contribute code, here's how you can help:

Found a bug? Open an issue at github.com/wonderwhy-er/ClaudeComputerCommander/issues
Have a feature idea? Submit a feature request in the issues section
Want to contribute code? Fork the repository, create a branch, and submit a pull request
Questions or discussions? Start a discussion in the GitHub Discussions tab
All contributions, big or small, are greatly appreciated!

If you find this tool valuable for your workflow, please consider supporting the project.

Frequently Asked Questions
Here are answers to some common questions. For a more comprehensive FAQ, see our detailed FAQ document.

What is Claude Desktop Commander?
It's an MCP tool that enables Claude Desktop to access your file system and terminal, turning Claude into a versatile assistant for coding, automation, codebase exploration, and more.

How is this different from Cursor/Windsurf?
Unlike IDE-focused tools, Claude Desktop Commander provides a solution-centric approach that works with your entire OS, not just within a coding environment. Claude reads files in full rather than chunking them, can work across multiple projects simultaneously, and executes changes in one go rather than requiring constant review.

Do I need to pay for API credits?
No. This tool works with Claude Desktop's standard Pro subscription ($20/month), not with API calls, so you won't incur additional costs beyond the subscription fee.

Does Desktop Commander automatically update?
Yes, when installed through npx or Smithery, Desktop Commander automatically updates to the latest version when you restart Claude. No manual update process is needed.

What are the most common use cases?
Exploring and understanding complex codebases
Generating diagrams and documentation
Automating tasks across your system
Working with multiple projects simultaneously
Making surgical code changes with precise control
I'm having trouble installing or using the tool. Where can I get help?
Join our Discord server for community support, check the GitHub issues for known problems, or review the full FAQ for troubleshooting tips. You can also visit our website FAQ section for a more user-friendly experience. If you encounter a new issue, please consider opening a GitHub issue with details about your problem.

Data Collection
During installation and setup, Desktop Commander collects anonymous usage data to help improve the tool. This includes:

Operating system information
Node.js and NPM versions
Installation method and shell environment
Error messages (if any occur during setup)
This data is collected using PostHog analytics and is associated with a machine-generated unique ID. No personal information is collected. This helps us understand how the tool is being used and identify common issues.

We are currently working on adding a built-in opt-out option for this data collection in an upcoming release. For now, if you wish to opt out, you can block network connections to eu.i.posthog.com in your firewall settings.

License
MIT

About
This is MCP server for Claude that gives it terminal control, file system search and diff file editing capabilities

desktopcommander.app/
Topics
agent ai mcp code-analysis code-generation terminal-ai terminal-automation vibe-coding
Resources
 Readme
License
 MIT license
 Activity
Stars
 1.6k stars
Watchers
 21 watching
Forks
 162 forks
Report repository
Releases 7
HOTFIX. Fix for folder creation
Latest
4 days ago
+ 6 releases
Packages
No packages published
Contributors
11
@wonderwhy-er
@serg33v
@dmitry-ottic-ai
@yarikoptic
@davidteren
@smithery-ai[bot]
@gluneau
@nbanks
@calclavia
@ausboss
@punkpeye
Deployments
60
 github-pages 6 hours ago
+ 59 deployments
Languages
TypeScript
68.0%
 
JavaScript
30.1%
 
Shell
1.4%
 
Dockerfile
0.5%
Footer
Â© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact
Manage cookies
Do not share my personal information
